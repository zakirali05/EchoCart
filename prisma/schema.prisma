// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  externalId   String    @unique
  emailAddress String    @unique
  username     String
  userImage    String
  cart         Product[]
  orders       Order[]
  isAdmin      Boolean   @default(false)
  comments     Comment[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  varients    Varient[]
  comments    Comment[]
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Varient {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  price     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  stars     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  Product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
}

enum OrderStatus {
  initiated
  packing
  dispatched
  delivered
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  quantity    Int
  totalPrice  String
  orderStatus OrderStatus @default(initiated)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?     @db.ObjectId
  Product     Product?    @relation(fields: [productId], references: [id])
  productId   String?     @db.ObjectId
}
